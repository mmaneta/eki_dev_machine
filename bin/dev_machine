#!/usr/bin/env python

import sys
import argparse
import importlib_resources
import yaml



import eki_dev.dev_machine as dev_m
from eki_dev import banner

ref = importlib_resources.files('eki_dev') / 'default_conf.yaml'
with importlib_resources.as_file(ref) as data_path:    
    with open(data_path, "r", encoding='utf8') as f:
        conf = yaml.load(f, Loader=yaml.FullLoader)


def main(args):

    dev_m.clean_dangling_contexts()

    if args.command == "blank":
        d = {"InstanceType": str(args.instance_type)}
        conf["Ec2Instance"]["Properties"].update(d)
        name = str(args.name)
        res = dev_m.create_ec2_instance(name=name,
                                        project_tag=str(args.tag),
                                        **conf["Ec2Instance"]["Properties"])

    if args.command == "list":
        dev_m.list_instances()

    if args.command == "remove":
        dev_m.terminate_instance(args.instance_id)

    if args.command == "explorer-machine":

        name = str(args.name)
        i = dev_m.create_instance_pull_start_server(name=name,
                                                    project_tag=str(args.tag),
                                                    **conf["Ec2Instance"]["Properties"])


if __name__ == "__main__":
    print(banner)

    parser = argparse.ArgumentParser(prog="dev_machine", 
                                     description="Development Machine provisioner for EKI Environment and Water")
    subparsers = parser.add_subparsers(dest="command")

    subparser_blank = subparsers.add_parser(
        name="blank", help="Create a blank EC2 instance"
    )
    subparser_blank.add_argument(
        "--name", "-n", type=str, help="instance name", default="blank_machine"
    )
    subparser_blank.add_argument(
        "--instance_type", "-i", type=str, help="instance type", default="t2.micro"
    )

    subparser_blank.add_argument(
        "--tag", "-t", type=str, help="project identification tag"
    )

    subparser_blank = subparsers.add_parser(name="list", help="List running instances")

    subparser_blank = subparsers.add_parser(
        name="remove", help="Terminate running instance"
    )
    subparser_blank.add_argument("instance_id", type=str, help="instance id")

    subparser_model_machine = subparsers.add_parser(name="explorer-machine", help="Create a data explorer machine")
    subparser_model_machine.add_argument(
        "--name", "-n", type=str, help="instance name", default="blank_machine")
    subparser_model_machine.add_argument(
        "--tag", "-t", type=str, help="project identification tag"
    )

    if len(sys.argv)==1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()
    try:
        main(args)
    except (Exception, KeyboardInterrupt) as e:
        print("CLEANING UP INSTANCE...")
        print(e)
        name = args.name
        # assumes list of instances are in order of creation, last instance will be removed
        last_inst = [i for i in dev_m._get_lst_instances().iterator()][-1]
        last_inst.load()

        print("terminating instance id {}".format(last_inst.id))
        dev_m.terminate_instance(last_inst.id)
